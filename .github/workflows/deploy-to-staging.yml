name: Deploy to Staging

on:
  push:
    branches: [testovi]

env:
  STAGING_ENV: staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: ${{ secrets.NODE_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: create .staging.env file
        run: |
          echo "NODE_ENV=${{ env.NODE_ENV }}" >> .staging.env
          echo "NODE_VERSION=${{ env.NODE_VERSION }}" >> .staging.env
          echo "PORT=${{ env.PORT }}" >> .staging.env
          echo "BASE_URL_CLIENT=${{ env.BASE_URL_CLIENT }}" >> .staging.env
          echo "BASE_URL_SERVER=${{ env.BASE_URL_SERVER }}" >> .staging.env
          echo "CLOUDINARY_API_KEY=${{ env.CLOUDINARY_API_KEY }}" >> .staging.env
          echo "CLOUDINARY_API_SECRET=${{ env.CLOUDINARY_API_SECRET }}" >> .staging.env
          echo "CLOUDINARY_CLOUD_NAME=${{ env.CLOUDINARY_CLOUD_NAME }}" >> .staging.env
          echo "DATABASE_URL_PG=${{ env.DATABASE_URL_PG }}" >> .staging.env
          echo "GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}" >> .staging.env
          echo "GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}" >> .staging.env
          echo "SESSION_NAME=${{ env.SESSION_NAME }}" >> .staging.env
          echo "SESSION_SECRET=${{ env.SESSION_SECRET }}" >> .staging.env
          chmod 644 .staging.env
      - name: Log .staging.env contents
        run: |
          cat .staging.env
      - name: Install pnpm
        run: npm install -g pnpm
      - uses: actions/cache@v3
        with:
          path: ~/.pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: pnpm install
      - run: pnpm run staging:set
      - run: pnpm run staging
