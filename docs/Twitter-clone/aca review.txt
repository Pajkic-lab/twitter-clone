- Use `InternalServerException` instead of `HttpException` (auth.repository)
- What is the point of cloudinary base service? I do not see a point in spliting it.
- ts-rest looks interesting
- Why are you using Automapper? If you like to use it, it's okay. Just make sure to know how and why it works.
  If tomorrow somebody asks you why, you can explain your reasoning.
- @Get('public-profile/followers/:userId/:offset/:limit') - This forces you to provide limit and offset
  I would use query approach, which is standard for REST API: `followers/55?limit=30`. This allows you to specify
  only needed fields, since you can provide default values, plus it's easier to expand in the future.
- To me, `social` table is confusing, I would name her something like `followers`. `social` is to generic term. 
- Should prisma be located in data-access? It is BE part, but it's located in package that is shared with FE.
- What is utile? I thought it was a type, but there are multiple files and properties.
- In utile controller, you can use `return res` instead of `response.json(res);`
- Explore using IsAuthGuard by default, and only whitelist public routes, it's easy to forgot some route, and leave API exposed.
- In user.repository, updateUser is just ugly and verbose. 
  How would you handle if value is boolean? It would require special check on top of a special check. It requires manual handling
  for every new added property.
- In a lot of places, you have try/catch block, NestJS has exception filters, that you can use to handle errors.
  If prisma errors are common, I would write handler that automatically returns 500 on prisma error
